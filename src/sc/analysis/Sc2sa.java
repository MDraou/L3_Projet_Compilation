/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;

import sa.*;
import sc.node.*;

public class Sc2sa extends DepthFirstAdapter
{

    private SaNode returnValue;

    public SaNode getRoot() {
        return this.returnValue;
    }

    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        System.out.println("<" +node.getClass().getName() +">");
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        System.out.println("</" +node.getClass().getName() +">");
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgProgram(AProgProgram node)
    {
        defaultIn(node);
    }

    public void outAProgProgram(AProgProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgProgram(AProgProgram node)
    {
        inAProgProgram(node);

        SaLDec op1 =null;
        SaLDec op2 =null;

        if(node.getOptionalDeclarationVariable() != null)
        {
            node.getOptionalDeclarationVariable().apply(this);
            op1 = (SaLDec) this.returnValue;
        }
        if(node.getListDeclarationFunction() != null)
        {
            node.getListDeclarationFunction().apply(this);
            op2 = (SaLDec) this.returnValue;
        }

        this.returnValue = new SaProg(op1, op2);

        outAProgProgram(node);
    }

    public void inAExprOrExpr(AExprOrExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOrExpr(AExprOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOrExpr(AExprOrExpr node)
    {
        inAExprOrExpr(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpOr(op1, op2);

        outAExprOrExpr(node);
    }

    public void inAExprOrFinishExpr(AExprOrFinishExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOrFinishExpr(AExprOrFinishExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOrFinishExpr(AExprOrFinishExpr node)
    {
        inAExprOrFinishExpr(node);
        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
        }
        outAExprOrFinishExpr(node);
    }

    public void inAExprAndExprAnd(AExprAndExprAnd node)
    {
        defaultIn(node);
    }

    public void outAExprAndExprAnd(AExprAndExprAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAndExprAnd(AExprAndExprAnd node)
    {
        inAExprAndExprAnd(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExprCompare() != null)
        {
            node.getExprCompare().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpAnd(op1,op2);

        outAExprAndExprAnd(node);
    }

    public void inAExprAndFinishExprAnd(AExprAndFinishExprAnd node)
    {
        defaultIn(node);
    }

    public void outAExprAndFinishExprAnd(AExprAndFinishExprAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAndFinishExprAnd(AExprAndFinishExprAnd node)
    {
        inAExprAndFinishExprAnd(node);
        if(node.getExprCompare() != null)
        {
            node.getExprCompare().apply(this);
        }
        outAExprAndFinishExprAnd(node);
    }

    public void inAExprEqualExprCompare(AExprEqualExprCompare node)
    {
        defaultIn(node);
    }

    public void outAExprEqualExprCompare(AExprEqualExprCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprEqualExprCompare(AExprEqualExprCompare node)
    {
        inAExprEqualExprCompare(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprCompare() != null)
        {
            node.getExprCompare().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExprAdd() != null)
        {
            node.getExprAdd().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpEqual(op1, op2);

        outAExprEqualExprCompare(node);
    }

    public void inAExprInfExprCompare(AExprInfExprCompare node)
    {
        defaultIn(node);
    }

    public void outAExprInfExprCompare(AExprInfExprCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInfExprCompare(AExprInfExprCompare node)
    {
        inAExprInfExprCompare(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprCompare() != null)
        {
            node.getExprCompare().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExprAdd() != null)
        {
            node.getExprAdd().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpInf(op1, op2);

        outAExprInfExprCompare(node);
    }

    public void inAExprCompareFinishExprCompare(AExprCompareFinishExprCompare node)
    {
        defaultIn(node);
    }

    public void outAExprCompareFinishExprCompare(AExprCompareFinishExprCompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCompareFinishExprCompare(AExprCompareFinishExprCompare node)
    {
        inAExprCompareFinishExprCompare(node);
        if(node.getExprAdd() != null)
        {
            node.getExprAdd().apply(this);
        }
        outAExprCompareFinishExprCompare(node);
    }

    public void inAExprAddExprAdd(AExprAddExprAdd node)
    {
        defaultIn(node);
    }

    public void outAExprAddExprAdd(AExprAddExprAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAddExprAdd(AExprAddExprAdd node)
    {
        inAExprAddExprAdd(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprAdd() != null)
        {
            node.getExprAdd().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExprMul() != null)
        {
            node.getExprMul().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpAdd(op1, op2);

        outAExprAddExprAdd(node);
    }

    public void inAExprMinusExprAdd(AExprMinusExprAdd node)
    {
        defaultIn(node);
    }

    public void outAExprMinusExprAdd(AExprMinusExprAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMinusExprAdd(AExprMinusExprAdd node)
    {
        inAExprMinusExprAdd(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprAdd() != null)
        {
            node.getExprAdd().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExprMul() != null)
        {
            node.getExprMul().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpSub(op1, op2);

        outAExprMinusExprAdd(node);
    }

    public void inAExprAddFinishExprAdd(AExprAddFinishExprAdd node)
    {
        defaultIn(node);
    }

    public void outAExprAddFinishExprAdd(AExprAddFinishExprAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAddFinishExprAdd(AExprAddFinishExprAdd node)
    {
        inAExprAddFinishExprAdd(node);
        if(node.getExprMul() != null)
        {
            node.getExprMul().apply(this);
        }
        outAExprAddFinishExprAdd(node);
    }

    public void inAExprMulExprMul(AExprMulExprMul node)
    {
        defaultIn(node);
    }

    public void outAExprMulExprMul(AExprMulExprMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMulExprMul(AExprMulExprMul node)
    {
        inAExprMulExprMul(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprMul() != null)
        {
            node.getExprMul().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExprNo() != null)
        {
            node.getExprNo().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpMult(op1, op2);

        outAExprMulExprMul(node);
    }

    public void inAExprDivExprMul(AExprDivExprMul node)
    {
        defaultIn(node);
    }

    public void outAExprDivExprMul(AExprDivExprMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprDivExprMul(AExprDivExprMul node)
    {
        inAExprDivExprMul(node);

        SaExp op1 = null;
        SaExp op2 = null;

        if(node.getExprMul() != null)
        {
            node.getExprMul().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprNo() != null)
        {
            node.getExprNo().apply(this);
            op2 = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpDiv(op1, op2);

        outAExprDivExprMul(node);
    }

    public void inAExprMulFinishExprMul(AExprMulFinishExprMul node)
    {
        defaultIn(node);
    }

    public void outAExprMulFinishExprMul(AExprMulFinishExprMul node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMulFinishExprMul(AExprMulFinishExprMul node)
    {
        inAExprMulFinishExprMul(node);
        if(node.getExprNo() != null)
        {
            node.getExprNo().apply(this);
        }
        outAExprMulFinishExprMul(node);
    }

    public void inAExprNoExprNo(AExprNoExprNo node)
    {
        defaultIn(node);
    }

    public void outAExprNoExprNo(AExprNoExprNo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNoExprNo(AExprNoExprNo node)
    {
        inAExprNoExprNo(node);

        SaExp op = null;

        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        if(node.getExprNo() != null)
        {
            node.getExprNo().apply(this);
            op = (SaExp) this.returnValue;
        }

        this.returnValue = new SaExpNot(op);

        outAExprNoExprNo(node);
    }

    public void inAExprNoFinishExprNo(AExprNoFinishExprNo node)
    {
        defaultIn(node);
    }

    public void outAExprNoFinishExprNo(AExprNoFinishExprNo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNoFinishExprNo(AExprNoFinishExprNo node)
    {
        inAExprNoFinishExprNo(node);
        if(node.getExprEnd() != null)
        {
            node.getExprEnd().apply(this);
        }
        outAExprNoFinishExprNo(node);
    }

    public void inAExprInParenthesisExprEnd(AExprInParenthesisExprEnd node)
    {
        defaultIn(node);
    }

    public void outAExprInParenthesisExprEnd(AExprInParenthesisExprEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInParenthesisExprEnd(AExprInParenthesisExprEnd node)
    {
        inAExprInParenthesisExprEnd(node);
        if(node.getOpeningParenthesis() != null)
        {
            node.getOpeningParenthesis().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getClosingParenthesis() != null)
        {
            node.getClosingParenthesis().apply(this);
        }

        outAExprInParenthesisExprEnd(node);
    }

    public void inANumbersExprEnd(ANumbersExprEnd node)
    {
        defaultIn(node);
    }

    public void outANumbersExprEnd(ANumbersExprEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumbersExprEnd(ANumbersExprEnd node)
    {
        inANumbersExprEnd(node);

        if(node.getNumbers() != null)
        {
            node.getNumbers().apply(this);
        }

        this.returnValue = new SaExpInt(Integer.parseInt(node.getNumbers().getText()));

        outANumbersExprEnd(node);
    }

    public void inAReadExprEnd(AReadExprEnd node)
    {
        defaultIn(node);
    }

    public void outAReadExprEnd(AReadExprEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadExprEnd(AReadExprEnd node)
    {
        inAReadExprEnd(node);
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }

        this.returnValue = new SaExpLire();

        outAReadExprEnd(node);
    }

    public void inAVariableExprEnd(AVariableExprEnd node)
    {
        defaultIn(node);
    }

    public void outAVariableExprEnd(AVariableExprEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableExprEnd(AVariableExprEnd node)
    {
        inAVariableExprEnd(node);
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        outAVariableExprEnd(node);
    }

    public void inAFunctionExprEnd(AFunctionExprEnd node)
    {
        defaultIn(node);
    }

    public void outAFunctionExprEnd(AFunctionExprEnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExprEnd(AFunctionExprEnd node)
    {
        inAFunctionExprEnd(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionExprEnd(node);
    }

    public void inASimpleVariableVariable(ASimpleVariableVariable node)
    {
        defaultIn(node);
    }

    public void outASimpleVariableVariable(ASimpleVariableVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleVariableVariable(ASimpleVariableVariable node)
    {
        inASimpleVariableVariable(node);

        SaVar op = null;

        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            op = new SaVarSimple(node.getIdentif().getText());
        }

        this.returnValue = new SaExpVar(op);

        outASimpleVariableVariable(node);
    }

    public void inAArrayOfVariablesVariable(AArrayOfVariablesVariable node)
    {
        defaultIn(node);
    }

    public void outAArrayOfVariablesVariable(AArrayOfVariablesVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayOfVariablesVariable(AArrayOfVariablesVariable node)
    {
        inAArrayOfVariablesVariable(node);

        SaVar op = null;
        String name = null;
        SaExp indice = null;

        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            name = node.getIdentif().getText();
        }
        if(node.getOpeningBracket() != null)
        {
            node.getOpeningBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            indice = (SaExp) this.returnValue;
        }
        if(node.getClosingBracket() != null)
        {
            node.getClosingBracket().apply(this);
        }

        op = new SaVarIndicee(name,indice);
        this.returnValue = new SaExpVar(op);

        outAArrayOfVariablesVariable(node);
    }

    public void inAFunctionSignatureFunction(AFunctionSignatureFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionSignatureFunction(AFunctionSignatureFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionSignatureFunction(AFunctionSignatureFunction node)
    {
        inAFunctionSignatureFunction(node);

        SaAppel op = null;
        String name = null;
        SaLExp argument = null;

        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            name = node.getIdentif().getText();
        }
        if(node.getOpeningParenthesis() != null)
        {
            node.getOpeningParenthesis().apply(this);
        }
        if(node.getListOfExpr() != null)
        {
            node.getListOfExpr().apply(this);
            argument = (SaLExp) this.returnValue;
        }
        if(node.getClosingParenthesis() != null)
        {
            node.getClosingParenthesis().apply(this);
        }

        op = new SaAppel(name,argument);
        this.returnValue = op;

        outAFunctionSignatureFunction(node);
    }

    public void inAListOfExprListOfExpr(AListOfExprListOfExpr node)
    {
        defaultIn(node);
    }

    public void outAListOfExprListOfExpr(AListOfExprListOfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListOfExprListOfExpr(AListOfExprListOfExpr node)
    {
        inAListOfExprListOfExpr(node);
        if(node.getSecondListOfExpr() != null)
        {
            node.getSecondListOfExpr().apply(this);
        }
        outAListOfExprListOfExpr(node);
    }

    public void inAEpsilonListOfExpr(AEpsilonListOfExpr node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListOfExpr(AEpsilonListOfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListOfExpr(AEpsilonListOfExpr node)
    {
        inAEpsilonListOfExpr(node);
        this.returnValue = null;
        outAEpsilonListOfExpr(node);
    }

    public void inASecondListOfExprSecondListOfExpr(ASecondListOfExprSecondListOfExpr node)
    {
        defaultIn(node);
    }

    public void outASecondListOfExprSecondListOfExpr(ASecondListOfExprSecondListOfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondListOfExprSecondListOfExpr(ASecondListOfExprSecondListOfExpr node)
    {
        inASecondListOfExprSecondListOfExpr(node);
        SaExp op1 = null;
        SaLExp op2 = null;

        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getSecondListOfExpr() != null)
        {
            node.getSecondListOfExpr().apply(this);
            op2 = (SaLExp) this.returnValue;
        }
        this.returnValue = new SaLExp(op1,op2);
        outASecondListOfExprSecondListOfExpr(node);
    }

    public void inAEndListOfExprSecondListOfExpr(AEndListOfExprSecondListOfExpr node)
    {
        defaultIn(node);
    }

    public void outAEndListOfExprSecondListOfExpr(AEndListOfExprSecondListOfExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndListOfExprSecondListOfExpr(AEndListOfExprSecondListOfExpr node)
    {
        inAEndListOfExprSecondListOfExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAEndListOfExprSecondListOfExpr(node);
    }

    public void inABlocInstructionBlocInstruction(ABlocInstructionBlocInstruction node)
    {
        defaultIn(node);
    }

    public void outABlocInstructionBlocInstruction(ABlocInstructionBlocInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocInstructionBlocInstruction(ABlocInstructionBlocInstruction node)
    {
        inABlocInstructionBlocInstruction(node);

        SaLInst op = null;

        if(node.getOpeningBrace() != null)
        {
            node.getOpeningBrace().apply(this);
        }
        if(node.getListInstruction() != null)
        {
            node.getListInstruction().apply(this);
            op = (SaLInst) this.returnValue;
        }
        if(node.getClosingBrace() != null)
        {
            node.getClosingBrace().apply(this);
        }
        this.returnValue = new SaInstBloc(op);
        outABlocInstructionBlocInstruction(node);
    }

    public void inAListInstructionListInstruction(AListInstructionListInstruction node)
    {
        defaultIn(node);
    }

    public void outAListInstructionListInstruction(AListInstructionListInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListInstructionListInstruction(AListInstructionListInstruction node)
    {
        inAListInstructionListInstruction(node);
        SaExpAppel temp = null;
        SaInst op1 = null;
        SaLInst op2 = null;
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
            op1 = (SaInst) this.returnValue;
        }
        if(node.getListInstruction() != null)
        {
            node.getListInstruction().apply(this);
            op2 = (SaLInst) this.returnValue;
        }
        this.returnValue = new SaLInst(op1,op2);
        outAListInstructionListInstruction(node);
    }

    public void inAEndListInstructionListInstruction(AEndListInstructionListInstruction node)
    {
        defaultIn(node);
    }

    public void outAEndListInstructionListInstruction(AEndListInstructionListInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndListInstructionListInstruction(AEndListInstructionListInstruction node)
    {
        inAEndListInstructionListInstruction(node);
        this.returnValue = null;
        outAEndListInstructionListInstruction(node);
    }

    public void inAAffectationInstruction(AAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstruction(AAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstruction(AAffectationInstruction node)
    {
        inAAffectationInstruction(node);
        SaExpVar temp = null;
        SaVar op1 = null;
        SaExp op2 = null;
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
            temp = (SaExpVar) this.returnValue;
            op1 = temp.getVar();
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op2 = (SaExp) this.returnValue;
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = new SaInstAffect(op1,op2);
        outAAffectationInstruction(node);
    }

    public void inAIfInstruction(AIfInstruction node)
    {
        defaultIn(node);
    }

    public void outAIfInstruction(AIfInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfInstruction(AIfInstruction node)
    {
        inAIfInstruction(node);
        SaExp op1 = null;
        SaInst op2 = null;
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
            op2 = (SaInst) this.returnValue;
        }
        this.returnValue = new SaInstSi(op1,op2,null);
        outAIfInstruction(node);
    }

    public void inAIfElseInstruction(AIfElseInstruction node)
    {
        defaultIn(node);
    }

    public void outAIfElseInstruction(AIfElseInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseInstruction(AIfElseInstruction node)
    {
        inAIfElseInstruction(node);
        SaExp op1 = null;
        SaInst op2 = null;
        SaInst op3 = null;
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
            op2 = (SaInst) this.returnValue;
        }
        if(node.getElseBloc() != null)
        {
            node.getElseBloc().apply(this);
            op3 = (SaInst) this.returnValue;
        }
        this.returnValue = new SaInstSi(op1,op2,op3);
        outAIfElseInstruction(node);
    }

    public void inAWhileInstruction(AWhileInstruction node)
    {
        defaultIn(node);
    }

    public void outAWhileInstruction(AWhileInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileInstruction(AWhileInstruction node)
    {
        inAWhileInstruction(node);
        SaExp op1 = null;
        SaInst op2 = null;
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op1 = (SaExp) this.returnValue;
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
            op2 = (SaInst) this.returnValue;
        }
        this.returnValue = new SaInstTantQue(op1,op2);
        outAWhileInstruction(node);
    }

    public void inAWriteInstruction(AWriteInstruction node)
    {
        defaultIn(node);
    }

    public void outAWriteInstruction(AWriteInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteInstruction(AWriteInstruction node)
    {
        inAWriteInstruction(node);

        SaExp op = null;

        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op = (SaExp) this.returnValue;
        }
        if(node.getClosingParenthesis() != null)
        {
            node.getClosingParenthesis().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = new SaInstEcriture(op);
        outAWriteInstruction(node);
    }

    public void inAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallInstruction(AFunctionCallInstruction node)
    {
        inAFunctionCallInstruction(node);
        SaExp op = null;
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
            op = (SaExp) this.returnValue;
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = op;
        outAFunctionCallInstruction(node);
    }

    public void inANewBlocInstructionInstruction(ANewBlocInstructionInstruction node)
    {
        defaultIn(node);
    }

    public void outANewBlocInstructionInstruction(ANewBlocInstructionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewBlocInstructionInstruction(ANewBlocInstructionInstruction node)
    {
        inANewBlocInstructionInstruction(node);
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        outANewBlocInstructionInstruction(node);
    }

    public void inAEmptyInstruction(AEmptyInstruction node)
    {
        defaultIn(node);
    }

    public void outAEmptyInstruction(AEmptyInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyInstruction(AEmptyInstruction node)
    {
        inAEmptyInstruction(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = null;
        outAEmptyInstruction(node);
    }

    public void inAReturnInstruction(AReturnInstruction node)
    {
        defaultIn(node);
    }

    public void outAReturnInstruction(AReturnInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInstruction(AReturnInstruction node)
    {
        inAReturnInstruction(node);

        SaExp op = null;

        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
            op = (SaExp) this.returnValue;
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = new SaInstRetour(op);
        outAReturnInstruction(node);
    }

    public void inAElseBlocElseBloc(AElseBlocElseBloc node)
    {
        defaultIn(node);
    }

    public void outAElseBlocElseBloc(AElseBlocElseBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseBlocElseBloc(AElseBlocElseBloc node)
    {
        inAElseBlocElseBloc(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
        }
        outAElseBlocElseBloc(node);
    }

    public void inAListDeclarationVariableListDeclarationVariable(AListDeclarationVariableListDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAListDeclarationVariableListDeclarationVariable(AListDeclarationVariableListDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDeclarationVariableListDeclarationVariable(AListDeclarationVariableListDeclarationVariable node)
    {
        inAListDeclarationVariableListDeclarationVariable(node);
        SaDec op1 = null;
        SaLDec op2 = null;
        if(node.getDeclarationVariable() != null)
        {
            node.getDeclarationVariable().apply(this);
            op1 = (SaDec) this.returnValue;
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getListDeclarationVariable() != null)
        {
            node.getListDeclarationVariable().apply(this);
            op2 = (SaLDec) this.returnValue;
        }
        this.returnValue = new SaLDec(op1,op2);
        outAListDeclarationVariableListDeclarationVariable(node);
    }

    public void inAEndListDeclarationVariableListDeclarationVariable(AEndListDeclarationVariableListDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAEndListDeclarationVariableListDeclarationVariable(AEndListDeclarationVariableListDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndListDeclarationVariableListDeclarationVariable(AEndListDeclarationVariableListDeclarationVariable node)
    {
        inAEndListDeclarationVariableListDeclarationVariable(node);
        SaDec op = null;
        if(node.getDeclarationVariable() != null)
        {
            node.getDeclarationVariable().apply(this);
            op = (SaDec) this.returnValue;
        }
        this.returnValue = new SaLDec(op,null);
        outAEndListDeclarationVariableListDeclarationVariable(node);
    }

    public void inAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDeclarationFunctionListDeclarationFunction(AListDeclarationFunctionListDeclarationFunction node)
    {
        inAListDeclarationFunctionListDeclarationFunction(node);
        SaDec op1 = null;
        SaLDec op2 = null;
        if(node.getDeclarationFunction() != null)
        {
            node.getDeclarationFunction().apply(this);
            op1 = (SaDec) this.returnValue;
        }
        if(node.getListDeclarationFunction() != null)
        {
            node.getListDeclarationFunction().apply(this);
            op2 = (SaLDec) this.returnValue;
        }
        this.returnValue = new SaLDec(op1,op2);
        outAListDeclarationFunctionListDeclarationFunction(node);
    }

    public void inAEndListDeclarationFunctionListDeclarationFunction(AEndListDeclarationFunctionListDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAEndListDeclarationFunctionListDeclarationFunction(AEndListDeclarationFunctionListDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndListDeclarationFunctionListDeclarationFunction(AEndListDeclarationFunctionListDeclarationFunction node)
    {
        inAEndListDeclarationFunctionListDeclarationFunction(node);
        this.returnValue = null;
        outAEndListDeclarationFunctionListDeclarationFunction(node);
    }

    public void inASimpleDeclarationVariableDeclarationVariable(ASimpleDeclarationVariableDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outASimpleDeclarationVariableDeclarationVariable(ASimpleDeclarationVariableDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleDeclarationVariableDeclarationVariable(ASimpleDeclarationVariableDeclarationVariable node)
    {
        inASimpleDeclarationVariableDeclarationVariable(node);
        String name = "";
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            name = node.getIdentif().getText();
        }
        this.returnValue = new SaDecVar(name);
        outASimpleDeclarationVariableDeclarationVariable(node);
    }

    public void inAArrayDeclarationVariableDeclarationVariable(AArrayDeclarationVariableDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclarationVariableDeclarationVariable(AArrayDeclarationVariableDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDeclarationVariableDeclarationVariable(AArrayDeclarationVariableDeclarationVariable node)
    {
        inAArrayDeclarationVariableDeclarationVariable(node);
        String name = null;
        Integer width = null;
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            name = node.getIdentif().getText();
        }
        if(node.getOpeningBracket() != null)
        {
            node.getOpeningBracket().apply(this);
        }
        if(node.getNumbers() != null)
        {
            node.getNumbers().apply(this);
            width = Integer.parseInt(node.getNumbers().getText());
        }
        if(node.getClosingBracket() != null)
        {
            node.getClosingBracket().apply(this);
        }
        this.returnValue = new SaDecTab(name,width);
        outAArrayDeclarationVariableDeclarationVariable(node);
    }

    public void inAYesDeclarationVariableOptionalDeclarationVariable(AYesDeclarationVariableOptionalDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outAYesDeclarationVariableOptionalDeclarationVariable(AYesDeclarationVariableOptionalDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYesDeclarationVariableOptionalDeclarationVariable(AYesDeclarationVariableOptionalDeclarationVariable node)
    {
        inAYesDeclarationVariableOptionalDeclarationVariable(node);
        SaLDec op = null;
        if(node.getListDeclarationVariable() != null)
        {
            node.getListDeclarationVariable().apply(this);
            op = (SaLDec) this.returnValue;
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        this.returnValue = op;
        outAYesDeclarationVariableOptionalDeclarationVariable(node);
    }

    public void inANoDeclarationVariableOptionalDeclarationVariable(ANoDeclarationVariableOptionalDeclarationVariable node)
    {
        defaultIn(node);
    }

    public void outANoDeclarationVariableOptionalDeclarationVariable(ANoDeclarationVariableOptionalDeclarationVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoDeclarationVariableOptionalDeclarationVariable(ANoDeclarationVariableOptionalDeclarationVariable node)
    {
        inANoDeclarationVariableOptionalDeclarationVariable(node);
        this.returnValue = null;
        outANoDeclarationVariableOptionalDeclarationVariable(node);
    }

    public void inADeclarationFunctionWithParameterDeclarationFunction(ADeclarationFunctionWithParameterDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outADeclarationFunctionWithParameterDeclarationFunction(ADeclarationFunctionWithParameterDeclarationFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationFunctionWithParameterDeclarationFunction(ADeclarationFunctionWithParameterDeclarationFunction node)
    {
        inADeclarationFunctionWithParameterDeclarationFunction(node);
        String name = null;
        SaLDec op1 = null;
        SaLDec op2 = null;
        SaInst op3 = null;
        if(node.getIdentif() != null)
        {
            node.getIdentif().apply(this);
            name = node.getIdentif().getText();
        }
        if(node.getListParam() != null)
        {
            node.getListParam().apply(this);
            op1 = (SaLDec) this.returnValue;
        }
        if(node.getOptionalDeclarationVariable() != null)
        {
            node.getOptionalDeclarationVariable().apply(this);
            op2 = (SaLDec) this.returnValue;
        }
        if(node.getBlocInstruction() != null)
        {
            node.getBlocInstruction().apply(this);
            op3 = (SaInst) this.returnValue;
        }
        this.returnValue = new SaDecFonc(name,op1,op2,op3);
        outADeclarationFunctionWithParameterDeclarationFunction(node);
    }

    public void inAWithParamListParam(AWithParamListParam node)
    {
        defaultIn(node);
    }

    public void outAWithParamListParam(AWithParamListParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithParamListParam(AWithParamListParam node)
    {
        inAWithParamListParam(node);

        SaLDec op = null;

        if(node.getOpeningParenthesis() != null)
        {
            node.getOpeningParenthesis().apply(this);
        }
        if(node.getListDeclarationVariable() != null)
        {
            node.getListDeclarationVariable().apply(this);
            op = (SaLDec) this.returnValue;
        }
        if(node.getClosingParenthesis() != null)
        {
            node.getClosingParenthesis().apply(this);
        }
        this.returnValue = op;
        outAWithParamListParam(node);
    }

    public void inAWithoutParamListParam(AWithoutParamListParam node)
    {
        defaultIn(node);
    }

    public void outAWithoutParamListParam(AWithoutParamListParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutParamListParam(AWithoutParamListParam node)
    {
        inAWithoutParamListParam(node);
        if(node.getOpeningParenthesis() != null)
        {
            node.getOpeningParenthesis().apply(this);
        }
        if(node.getClosingParenthesis() != null)
        {
            node.getClosingParenthesis().apply(this);
        }
        this.returnValue = null;
        outAWithoutParamListParam(node);
    }
}
